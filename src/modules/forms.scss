//
// Forms
// -----------------------------------------------------------------------------


// Basic input elements
// -----------------------------------------------------------------------------

// Base style for all inputs
%form-inputbase {
  background: transparent;

  @each $size in $form-input-sizes {
    &.input-#{nth($size, 1)} {
      font-size: nth($size, 2);
    }
  }
}

// Base style for text-based inputs
%form-inputtext {
  border: 1px solid $color-gray-light;
  display: inline-block;
  margin: .25em;
  padding: .5em;
  text-overflow: ellipsis;
  width: 15em;

  // Extend more basic styling
  @extend %form-inputbase;
  @extend %outline-primary;

  // Properly color placeholder-pseudo-element
  &::placeholder {
    color: $color-gray-light;
  }

  // Form controls extend to maximal available width
  &.form-control {
    display: block;
    margin-left: 0;
    margin-right: 0;
    width: 100%;
  }

  // Additionally indicate disabled state by background color.
  &[disabled],
  &.disabled {
    background: $color-gray-lighter;
  }

  // Generate colored inputs
  @each $color in $colors {
    &.input-#{nth($color, 1)} {
      border-color: nth($color, 2);
      @extend %outline-#{nth($color, 1)};
    }
  }

  // Indicate required style by tinting the element.
  &[required] {
    background: fade-out($form-input-required-color, .95);
  }
}

// Generate styles for appropiate inputs
input[type='color'],
input[type='date'],
input[type='datetime'],
input[type='datetime-local'],
input[type='email'],
input[type='month'],
input[type='number'],
input[type='password'],
input[type='search'],
input[type='tel'],
input[type='text'],
input[type='time'],
input[type='url'],
textarea {
  @extend %form-inputtext;
  @extend %fix-inputs;
}

// Allow only vertical resizing of textareas
textarea {
  resize: vertical;
}

// Select element that preserves mobile-native style
// TODO(matthiasgi): Flat selects also on mobile
select {
  @extend %form-inputtext;
}


// Radio- and checkboxes
// -----------------------------------------------------------------------------

// Common styling
.checkbox,
.radio {
  @extend %form-inputbase;
  display: block;
  margin: .25em;
  position: relative;

  // Hide actual input and redirect functionality
  input[type=checkbox],
  input[type=radio] {
    height: 0;
    opacity: 0;
    position: absolute;
    width: 0;

    // Clearly indicate disabled state
    &[disabled],
    .disabled {
      + label {
        @extend .disabled;

        &::before {
          box-shadow: inset 0 0 0 3px $color-gray-light;
        }
      }

      &:not(:checked) + label::before {
        background: $color-gray-light;
        box-shadow: none;
      }
    }

    // Allow focussing the fake input
    &:focus {
      outline: 0;

      + label {
        @include outline-base($color-brand-primary);
      }
    }

    // Imitate checked style
    &:checked + label::before {
      background-color: $color-brand-primary;
      border-color: darken($color-brand-primary, 10%);
    }
  }

  // Style label that replaces the input
  label {
    cursor: pointer;
    line-height: normal;
    margin-left: -.5em;
    padding: .5em;

    // Input replacement
    &::before {
      border: 1px solid $color-gray-light;
      box-shadow: inset 0 0 0 3px #fff;
      content: "";
      display: inline-block;
      height: 1.2em;
      margin-right: .5em;
      transition: #{$animation-spec};
      transition-property: background-color, border-color;
      vertical-align: text-bottom;
      width: 1.2em;
    }

    &:hover::before {
      background-color: $color-gray-light;
    }
  }

  // Generate colored versions
  @each $color in $colors {
    &.input-#{nth($color, 1)} {
      $color: nth($color, 2);

      input[type='checkbox'],
      input[type='radio'] {
        &:focus + label {
          @include outline-base($color);
        }

        &:checked + label::before {
          background-color: $color;
          border-color: $color;
        }
      }

      label {
        color: $color;

        &::before {
          border-color: $color;
        }
      }
    }
  }
}

// Make radio round
.radio label::before {
  border-radius: 50%;
}

// Inline styles
.checkbox-inline {
  @extend .checkbox;
  display: inline-block;
}

.radio-inline {
  @extend .radio;
  display: inline-block;
}


// Form elements
// -----------------------------------------------------------------------------

// Element grouping
.form-group {
  display: block;
  margin: .25em 0;

  > label {
    display: block;
    font-weight: bold;
  }

  input,
  select,
  .checkbox,
  .radio {
    margin: 0;
  }

  @each $color in $colors {
    &.input-#{nth($color, 1)} {
      label {
        color: nth($color, 2);
      }

      input {
        @extend .input-#{nth($color, 1)};
      }
    }
  }
}

// Aligning elements in grid-like structure
@media (min-width: $form-responsive-breakpoint) {
  .form-aligned .form-group {

    > label {
      display: inline-block;
      padding-right: 1em;
      text-align: right;
      width: 12em;
    }

    > input,
    > select,
    > .input-static {
      display: inline-block;

      &.form-control {
        width: 15em;
        width: calc(100% - 12em);
      }
    }

    > .checkbox,
    > .radio {
      margin-left: 12em;
    }
  }
}

// Force inline style for inline form
.form-inline {
  .checkbox,
  .radio {
    display: inline-block;
  }
}


// Fieldsets
// -----------------------------------------------------------------------------

fieldset {
  border: 0;
  margin: 0;
  padding: 0;

  legend {
    border-bottom: 1px solid $color-gray-light;
    display: block;
    font-size: 1.1em;
    margin-bottom: 1em;
    padding: .25em 0;
    width: 100%;
  }

  &[disabled],
  &.disabled {
    input,
    select {
      background: $color-gray-lighter;
    }
  }
}

// Stack elements tightly
.form-stack {
  display: block;
  margin: .25em 0;

  > input,
  > select,
  > textarea {
    display: block;
    margin: 0;

    &:not(:last-child) {
      border-bottom: none;
    }
  }
}
