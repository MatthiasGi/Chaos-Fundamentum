//
// Module: Grid
// -----------------------------------------------------------------------------


// Basic cell mixin
@mixin grid-cell {
	padding: $grid-gutter / 2;
	box-sizing: border-box;
	flex: none;
	width: 100%;
}

// Flexible cell mixin
@mixin grid-cell-flex($width: auto) {
	@if $width == auto {
		flex: 1;
	} @else {
		// Overwrite 100%-rule of grid-cell
		width: percentage($width / 100) !important;
	}
}

// Cell with offset mixin
@mixin grid-cell-offset($offset) {
	margin-left: percentage($offset / 100);
}

// Actual grid
.grid {
	
	// Container style
	display: flex;
	flex-flow: row wrap;
	
	// Global alignment
	&.grid-top {
		align-items: flex-start;
	}

	&.grid-center {
		align-items: center;
	}

	&.grid-bottom {
		align-items: flex-end;
	}

	// Individual alignment
	.cell-top {
		align-self: flex-start;
	}

	.cell-center {
		align-self: center;
	}
	
	.cell-bottom {
		align-self: flex-end;
	}
	
	.cell-stretch {
		align-self: stretch;
	}

	// Basic Cell preparations
	@if $grid-cell-breakpoint <= 0 {
		.cell {
			@include grid-cell;
			@include grid-cell-flex;
		}

		@each $width in $grid-widths {
			.cell-#{$width} {
				@include grid-cell;
				@include grid-cell-flex($width);
			}
		}
	}

	// Basic Cell offsets
	@if $grid-offset-breakpoint <= 0 {
		@each $width in $grid-widths {
			.cell-push-#{$width} {
				@include grid-cell-offset($width);
			}

			.cell-pull-#{$width} {
				@include grid-cell-offset(-$width);
			}
		}
	}

	// Responsive cell preparations
	@each $breakpoint in $breakpoints {
		@if $grid-cell-breakpoint <= nth($breakpoint, 2) {
			.cell-#{nth($breakpoint, 1)} {
				@include grid-cell;

				// Responsiveness
				@media (min-width: #{nth($breakpoint, 2)}) {
					@include grid-cell-flex;
				}
			}

			@each $width in $grid-widths {
				.cell-#{nth($breakpoint, 1)}-#{$width} {
					@include grid-cell;

					// Responsiveness
					@media (min-width: #{nth($breakpoint, 2)}) {
						@include grid-cell-flex($width);
					}
				}
			}
		}

		// Offsets
		@if $grid-offset-breakpoint <= nth($breakpoint, 2) and
				$grid-cell-breakpoint <= nth($breakpoint, 2) {
			@each $width in $grid-widths {
				.cell-#{nth($breakpoint, 1)}-push-#{$width} {
					@include grid-cell-offset($width);
				}
	
				.cell-#{nth($breakpoint, 1)}-pull-#{$width} {
					@include grid-cell-offset(-$width);
				}
			}
		}
	}

}